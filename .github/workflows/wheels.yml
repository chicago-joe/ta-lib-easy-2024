name: Build

on:
  push:
    branches:
      - main

jobs:
  generate-wheels-matrix:
    name: Generate wheels matrix
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.set-matrix.outputs.include }}
    steps:
      - uses: actions/checkout@v3
      - name: Install cibuildwheel
        run: pipx install cibuildwheel==2.22.0
      - id: set-matrix
        run: |
          MATRIX=$(
            {
              cibuildwheel --print-build-identifiers --platform linux \
              | jq -nRc '{"only": inputs, "os": "ubuntu-latest"}' \
              && cibuildwheel --print-build-identifiers --platform macos \
              | jq -nRc '{"only": inputs, "os": "macos-latest"}' \
              && cibuildwheel --print-build-identifiers --platform windows \
              | jq -nRc '{"only": inputs, "os": "windows-latest"}'
            } | jq -sc
          )
          echo "include=$MATRIX" >> $GITHUB_OUTPUT          
    env:
      CIBW_ARCHS_LINUX: x86_64 aarch64
      CIBW_ARCHS_MACOS: universal2
      CIBW_ARCHS_WINDOWS: x86 AMD64

  build-wheels:
    name: Build ${{ matrix.only }}
    needs: generate-wheels-matrix
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-wheels-matrix.outputs.include) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - uses: pypa/cibuildwheel@v2.22.0
        with:
          only: ${{ matrix.only }}
      
      - name: Upload built wheels as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: wheelhouse/*

  upload_wheels:
      name: Upload wheels
      runs-on: ubuntu-latest
      needs: build-wheels
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - name: Download built wheels
          uses: actions/download-artifact@v3
          with:
            name: wheels
            path: wheelhouse

        - name: Install Twine
          run: python -m pip install twine

        - name: Upload to PyPI
          run: |
            twine upload wheelhouse/*
          env:
            TWINE_USERNAME: __token__
            TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}